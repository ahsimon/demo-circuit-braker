management:
  health.db.enabled: false
  endpoints:    
    web:
      base-path: /
      exposure:
        include: "*"

server:
  port: 4070
  servlet:
    context-path: /api/flights/clusters

jetty:
  threadPool:
    maxThreads: 10
    minThreads: 10

chaos:
  monkey:
    enabled: false
    watcher:
      restController: true
    assaults:
      exceptionsActive: true
      latencyActive: true   
      latencyRangeStart: 10
      latencyRangeEnd: 5000  
      
spring:
  profiles:
    active: default
    
redis:
   host: localhost
   port: 6079
    
connector:
   catalog:
      host: http://localhost:6070
      responseTimeout: 2000
      connectionTimeout: 2000
      readTimeout: 2000
   pricing:
      host: http://localhost:5070
      responseTimeout: 10000
      connectionTimeout: 10000
      readTimeout: 10000   
   itineraries-search:
      host: http://localhost:7070
      responseTimeout: 10000
      connectionTimeout: 10000
      readTimeout: 10000    
      
resilience4j.circuitbreaker:
  configs:
    default:
      failure-rate-threshold: 50
      sliding-window-type: count_based
      sliding-window-size: 5

      automatic-transition-from-open-to-half-open-enabled: true
      wait-duration-in-open-state: 10s
      permitted-number-of-calls-in-half-open-state: 1

      register-health-indicator: false
      record-exceptions:
        - java.lang.RuntimeException
        - java.lang.InterruptedException
        - io.netty.handler.timeout.ReadTimeoutException
        - org.springframework.web.reactive.function.client.WebClientRequestException
  backends:
    pricing:
      baseConfig: default

resilience4j.ratelimiter:
  configs:
    default:
      register-health-indicator: true
      timeout-duration: 1000ms
      limit-refresh-period: 10s
      limit-for-period: 2
  backends:
    clusters:
      baseConfig: default                             